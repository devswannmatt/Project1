include partials/header

style.
  html, body {
    margin: 0;
    overflow: hidden;
    font-family: sans-serif;
  }
  #hexContainer {
    display: flex;
    height: 100vh;
    width: 100vw;
  }
  canvas {
    flex-grow: 1;
    background-color: #1e1e1e;
  }
  .hexInfoPanel {
      flex: 0 0 300px;
      background: #2a2a2a;
      color: white;
      box-sizing: border-box;
      overflow-y: auto;
      float: left;
  }
  .hexInfoPanel img {
    width: 100%;
    border-radius: 6px;
  }
  .hexInfoPanel h2 {
    margin-top: 10px;
    padding: 5px;
  }
  .hexInfoPanel p {
    padding: 10px;
  }
  .button {
    margin-top: 10px;
    display: inline-block;
    padding: 8px 12px;
    background: #444;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    color: white;
  }
  .button:hover {
    background: #666;
  }

h2 Grand Campaign
#hexContainer
  .hexInfoPanel
    img#hexBanner(src="./images/plains.jpg" alt="Hex Banner")
    h2#hexTitle No Hex Selected
    p#hexDetails Click a hex to see its details here.
    p
      button.button Action 1
      button.button Action 2
  canvas#hexCanvas(data-terrainmap=terrainMap, data-terrainimages=terrainImages, data-terrainprovinces=provinceMap)

script.
  const hexCanvas  = document.getElementById('hexCanvas');
  const hexCtx     = hexCanvas.getContext('2d');
  const hexTitle   = document.getElementById('hexTitle');
  const hexDetails = document.getElementById('hexDetails');
  const hexBanner  = document.getElementById('hexBanner');

  let width        = window.innerWidth;
  let height       = window.innerHeight;
  hexCanvas.width  = width;
  hexCanvas.height = height;

  let zoom    = 1;
  let offsetX = 0;
  let offsetY = 0;

  let dragging    = false;
  let dragStart   = { x: 0, y: 0 };
  let hoveredHex  = null;
  let selectedHex = null;

  let hexSize = 40;
  let terrainMapData      = $(hexCanvas).data('terrainmap');
  let terrainImagesData   = $(hexCanvas).data('terrainimages');
  let terrainProvinceData = $(hexCanvas).data('terrainprovinces');

  drawHexMap();

  window.addEventListener('resize', () => {
    hexCanvas.width  = window.innerWidth - 300;
    hexCanvas.height = window.innerHeight;
    drawHexMap();
  });

  hexCanvas.addEventListener('wheel', (e) => {
    e.preventDefault();
    const delta = e.deltaY > 0 ? 0.9 : 1.1;
    zoom *= delta;
    drawHexMap();
  });

  hexCanvas.addEventListener('mousedown', (e) => {
    const rect = hexCanvas.getBoundingClientRect();
    dragging = true;
    dragStart.x = e.clientX - rect.left;
    dragStart.y = e.clientY - rect.top;
  });

  hexCanvas.addEventListener('mousemove', (e) => {
    const rect = hexCanvas.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;

    if (dragging) {
      offsetX += (mouseX - dragStart.x) / zoom;
      offsetY += (mouseY - dragStart.y) / zoom;
      dragStart.x = mouseX;
      dragStart.y = mouseY;
      drawHexMap();
    } else {
      const hex = pixelToHex(mouseX, mouseY);
      hoveredHex = hex;
      drawHexMap();
    }
  });

  hexCanvas.addEventListener('mouseup', (e) => {
    dragging = false;

    const rect = hexCanvas.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;

    const hex = pixelToHex(mouseX, mouseY);
    selectedHex = hex;
    updatehexInfoPanel(hex);
    drawHexMap();
  });

  hexCanvas.addEventListener('mouseleave', () => {
    dragging = false;
    hoveredHex = null;
    drawHexMap();
  });

  function hexToPixel(q, r) {
    const x = hexSize * Math.sqrt(3) * (q + r / 2);
    const y = hexSize * 3/2 * r;
    return { x, y };
  }

  function pixelToHex(x, y) {
    const localX = (x - offsetX) / zoom;
    const localY = (y - offsetY) / zoom;

    const q = (Math.sqrt(3) / 3 * localX - 1 / 3 * localY) / hexSize;
    const r = (2 / 3 * localY) / hexSize;
    return hexRound(q, r);
  }

  function hexRound(q, r) {
    let x = q;
    let z = r;
    let y = -x - z;

    let rx = Math.round(x);
    let ry = Math.round(y);
    let rz = Math.round(z);

    const x_diff = Math.abs(rx - x);
    const y_diff = Math.abs(ry - y);
    const z_diff = Math.abs(rz - z);

    if (x_diff > y_diff && x_diff > z_diff) {
      rx = -ry - rz;
    } else if (y_diff > z_diff) {
      ry = -rx - rz;
    } else {
      rz = -rx - ry;
    }
    return { q: rx, r: rz };
  }

  function drawHex(x, y, isHovered = false, isSelected = false, terrain = { color: '#444', imageKey: 'grass' }) {
    const size = isHovered ? hexSize * 1.1 : hexSize;
    hexCtx.save();

    // Build hex path once
    const path = new Path2D();
    for (let i = 0; i < 6; i++) {
      const angle = Math.PI / 180 * (60 * i + 30);
      const px = x + size * Math.cos(angle);
      const py = y + size * Math.sin(angle);
      if (i === 0) path.moveTo(px, py);
      else path.lineTo(px, py);
    }
    path.closePath();

    // Fill color
    hexCtx.fillStyle = terrain.color || '#444';
    hexCtx.fill(path);

    // Clip and draw image overlay
    hexCtx.save();
    hexCtx.clip(path);
    const img = terrainImagesData[terrain.imageKey];
    if (img?.complete) {
      hexCtx.drawImage(img, x - size, y - size, size * 2, size * 2);
    }
    hexCtx.restore();

    // Province border (if defined)
    if (terrain.province && terrainProvinceData[terrain.province]) {
      hexCtx.strokeStyle = terrainProvinceData[terrain.province].color;
      hexCtx.lineWidth = 3;
      hexCtx.stroke(path);
    }

    // Selection/highlight border
    hexCtx.strokeStyle = isSelected ? '#0ff' : isHovered ? '#fff' : '#aaa';
    hexCtx.lineWidth = isSelected ? 3 : isHovered ? 2 : 1;
    hexCtx.stroke(path);

    hexCtx.restore();
  }

  function drawHexMap() {
    const canvasRect = hexCanvas.getBoundingClientRect();
    hexCtx.setTransform(1, 0, 0, 1, 0, 0);
    hexCtx.clearRect(0, 0, hexCanvas.width, hexCanvas.height);
    hexCtx.setTransform(zoom, 0, 0, zoom, offsetX, offsetY);

    const drawnHexes = [];

    for (const key in terrainMapData) {
      const [q, r] = key.split(',').map(Number);

      const isHovered  = hoveredHex && hoveredHex.q === q && hoveredHex.r === r;
      const isSelected = selectedHex && selectedHex.q === q && selectedHex.r === r;

      if (!isHovered && !isSelected) {
        const { x, y } = hexToPixel(q, r);
        drawHex(x, y, false, false, terrainMapData[key]);
      }
    }

    // Draw hovered tile (if not selected)
    if (hoveredHex && !(selectedHex && hoveredHex.q === selectedHex.q && hoveredHex.r === selectedHex.r)) {
      const { q, r } = hoveredHex;
      const key = `${q},${r}`;
      const { x, y } = hexToPixel(q, r);
      drawHex(x, y, true, false, terrainMapData[key]);
    }

    // Draw selected tile last
    if (selectedHex) {
      const { q, r } = selectedHex;
      const key = `${q},${r}`;
      const { x, y } = hexToPixel(q, r);
      drawHex(x, y, hoveredHex?.q === q && hoveredHex?.r === r, true, terrainMapData[key]);
    }
  }

  function updatehexInfoPanel(hex) {
    const key = `${hex.q},${hex.r}`;
    const terrain    = terrainMapData[key] || { type: 'unknown', color: '#333', image: 'grass' };
    const provinceId = terrain.province;
    const province   = provinceId ? terrainProvinceData[provinceId] : null;
    console.log(terrain)
    hexDetails.innerHTML = `
      Type: ${terrain.type} <br />
      Coordinates: q=${hex.q}, r=${hex.r} <br />
      Province: ${province ? province.name : 'â€”'}`.trim();
    hexBanner.src = `./uploads/campaign/${terrain.image}.png`;
  }

include partials/footer