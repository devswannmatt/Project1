
div#floating-frame
  p#floating-frame-message1
  p#floating-frame-message2
  p#floating-frame-message3

</div>

script(src='https://code.jquery.com/jquery-3.6.0.min.js')
script(src='https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js')
script(src='https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js')
script(src='https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.7.570/pdf.min.js')

script.

    // Example of the floatingMessage function
    function floatingMessage(message1, message2, message3) {
        const msg1 = $('#floating-frame-message1');
        const msg2 = $('#floating-frame-message2');
        const msg3 = $('#floating-frame-message3');

        // Fade in msg1 immediately
        msg1.text(message1).fadeIn(1000, function() {
            // After 1 second, fade in msg2
            setTimeout(function() {
                msg2.text(message2).fadeIn(1000, function() {
                    // After 1 second, fade in msg3
                    setTimeout(function() {
                        msg3.text(message3).fadeIn(1000, function() {
                            // After all messages have faded in, wait for 3 seconds, then fade them out
                            setTimeout(function() {
                                msg1.fadeOut(1000);
                                msg2.fadeOut(1000);
                                msg3.fadeOut(1000);
                            }, 3000); // 3-second delay before fade out
                        });
                    }, 1000); // 1-second delay before msg3 fades in
                });
            }, 1000); // 1-second delay before msg2 fades in
        });
    }

    // JavaScript to handle image click and show modal
    $(document).ready(function() {
        $('#imgModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget) // Button that triggered the modal
            var config = button.data()
            var modal = $(this)
            modal.find('.modal-title').text(config.name)
            modal.find('#modal-body-image').attr('src', config.image)
            modal.find('#modal-body-desc').html(`"${config.description}"`)
            modal.find('#modal-body-extra').html(`Credit: ${config.owner} Uploaded: ${new Date(config.uploaddate).toLocaleDateString()}`)
            modal.find('#modal-edit-link').attr('href', `/images/edit/${config.id}`)
        })

        $('#pdfModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget) // Button that triggered the modal
            var config = button.data()
            var modal  = $(this)
            modal.find('.modal-title').text(button.data('name'))
            modal.find('#modal-edit-link').attr('href', `/images/edit/${config.id}`)

            pageNum = 1;

            pdfjsLib.getDocument(config.pdf).promise.then(function(pdfDoc_) {
                pdfDoc = pdfDoc_;
                document.getElementById('pageCount').textContent = pdfDoc.numPages;
                renderPage(pageNum);
            });
        });

        var pdfjsLib = window['pdfjs-dist/build/pdf'];  // Initialize pdfjsLib
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.7.570/pdf.worker.min.js';

        var pdfDoc = null,
            pageNum = 1,
            pageRendering = false,
            pageNumPending = null,
            canvas = document.getElementById('pdfViewerCanvas'),
            ctx = canvas.getContext('2d');

        function renderPage(num) {
            pageRendering = true;
            pdfDoc.getPage(num).then(function(page) {
                var scale = 1.5;
                var viewport = page.getViewport({ scale: scale });

                canvas.height = viewport.height;
                canvas.width = viewport.width;

                // Clear any existing content in the canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);

                renderTask.promise.then(function() {
                pageRendering = false;
                if (pageNumPending !== null) {
                    renderPage(pageNumPending);
                    pageNumPending = null;
                }
                });
            });
            document.getElementById('pageNum').textContent   = pageNum;
            document.getElementById('pageCount').textContent = pdfDoc.numPages;
        }

        function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        }

        function onPrevPage() {
            if (pdfDoc.numPages == 1) return;
            if (pageNum <= 1) {
                pageNum = pdfDoc.numPages
            } else {
                pageNum--;
            }
            queueRenderPage(pageNum);
        }

        function onNextPage() {
            if (pdfDoc.numPages == 1) return;
            if (pageNum >= pdfDoc.numPages) {
                pageNum = 1
            } else {
                pageNum++;
            }
            queueRenderPage(pageNum);
        }

        document.getElementById('prevPage').addEventListener('click', onPrevPage);
        document.getElementById('nextPage').addEventListener('click', onNextPage);
    });

    document.addEventListener('DOMContentLoaded', function() {
        var holdDeleteBtn = document.getElementById('holdDeleteBtn');
        var deleteForm = document.getElementById('deleteForm');
        var holdTimeout;

        holdDeleteBtn.addEventListener('mousedown', function() {
        holdTimeout = setTimeout(function() {
            if (confirm('Are you sure you want to delete this page?')) {
                deleteForm.submit();
            }
        }, 3000); // 3 seconds hold time
        });

        holdDeleteBtn.addEventListener('mouseup', function() {
            clearTimeout(holdTimeout);
        });

        holdDeleteBtn.addEventListener('mouseleave', function() {
            clearTimeout(holdTimeout);
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        var contentTextarea = document.getElementById('content');
        var contentPreview = document.getElementById('contentPreview');

        contentTextarea.addEventListener('input', function() {
            contentPreview.innerHTML = contentTextarea.value;
        });

        // Initialize preview with existing content
        contentPreview.innerHTML = contentTextarea.value;
    });
